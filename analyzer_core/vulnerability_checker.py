from typing import List, Dict

class VulnerabilityChecker:
    def __init__(self, devices: List[Dict]):
        self.devices = devices

    def get_vulnerable_devices(self) -> List[Dict]:
        vulnerable = []
        for device in self.devices:
            for service in device.get("services", []):
                if service.get("vulnerability"):
                    vulnerable.append(device)
                    break
        return vulnerable

    def summary(self) -> Dict[str, int]:
        total = len(self.devices)
        vulnerable = len(self.get_vulnerable_devices())
        return {
            "total_devices": total,
            "vulnerable_devices": vulnerable,
            "safe_devices": total - vulnerable
        }

if __name__ == "__main__":
    from loader import NetworkLoader
    loader = NetworkLoader("data/generated_topologies/sample_topology.json")
    loader.load()

    checker = VulnerabilityChecker(loader.get_devices())
    print(checker.summary())
